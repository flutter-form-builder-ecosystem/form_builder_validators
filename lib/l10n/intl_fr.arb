{
  "@@locale": "fr",
  "notMatchErrorText": "La valeur ne doit pas correspondre au modèle",
  "satisfyErrorText": "La valeur ne satisfait pas la condition.",
  "andSeparator": " et ",
  "betweenLengthErrorText": "La valeur doit avoir une longueur comprise entre {min} et {max}, inclus.",
  "@betweenLengthErrorText": {
    "placeholders": {
      "min": {
        "type": "int",
        "description": "The minimum length allowed"
      },
      "max": {
        "type": "int",
        "description": "The maximum length allowed"
      }
    }
  },
  "creditCardErrorText": "Ce champ nécessite un numéro de carte de crédit valide.",
  "dateStringErrorText": "Ce champ nécessite une chaîne de date valide.",
  "emailErrorText": "Ce champ nécessite une adresse e-mail valide.",
  "equalErrorText": "Cette valeur de champ doit être égale à {value}.",
  "equalLengthErrorText": "La valeur doit avoir une longueur égale à {length}.",
  "integerErrorText": "Ce champ nécessite un entier valide.",
  "ipErrorText": "Ce champ nécessite une adresse IP valide.",
  "matchErrorText": "La valeur ne correspond pas au modèle.",
  "maxErrorText": "La valeur doit être inférieure ou égale à {max}.",
  "maxLengthErrorText": "La valeur doit avoir une longueur inférieure ou égale à {maxLength}.",
  "maxWordsCountErrorText": "La valeur doit avoir un nombre de mots inférieur ou égal à {maxWordsCount}.",
  "minErrorText": "La valeur doit être supérieure ou égale à {min}.",
  "minLengthErrorText": "La valeur doit avoir une longueur supérieure ou égale à {minLength}.",
  "minWordsCountErrorText": "La valeur doit avoir un nombre de mots supérieur ou égal à {minWordsCount}.",
  "notEqualErrorText": "Cette valeur de champ ne doit pas être égale à {value}.",
  "numericErrorText": "La valeur doit être numérique.",
  "requiredErrorText": "Ce champ ne peut pas être vide.",
  "urlErrorText": "Ce champ nécessite une adresse URL valide.",
  "phoneErrorText": "Ce champ nécessite un numéro de téléphone valide.",
  "creditCardExpirationDateErrorText": "Ce champ nécessite une date d'expiration valide pour la carte de crédit.",
  "creditCardExpiredErrorText": "La carte de crédit a expiré.",
  "creditCardCVCErrorText": "Ce champ nécessite un code CVC valide pour la carte de crédit.",
  "colorCodeErrorText": "Ce champ nécessite un code couleur valide.",
  "uppercaseErrorText": "Ce champ nécessite des lettres majuscules.",
  "lowercaseErrorText": "Ce champ nécessite des lettres minuscules.",
  "fileExtensionErrorText": "Ce champ nécessite une extension de fichier valide.",
  "fileSizeErrorText": "Ce fichier dépasse la taille maximale autorisée.",
  "dateRangeErrorText": "La date doit être dans l'intervalle autorisé.",
  "mustBeTrueErrorText": "Ce champ doit être vrai.",
  "mustBeFalseErrorText": "Ce champ doit être faux.",
  "containsSpecialCharErrorText": "Ce champ doit contenir un caractère spécial.",
  "containsUppercaseCharErrorText": "Ce champ doit contenir une lettre majuscule.",
  "containsLowercaseCharErrorText": "Ce champ doit contenir une lettre minuscule.",
  "containsNumberErrorText": "Ce champ doit contenir un chiffre.",
  "alphabeticalErrorText": "Ce champ doit contenir uniquement des lettres.",
  "uuidErrorText": "Ce champ nécessite un UUID valide.",
  "jsonErrorText": "Ce champ nécessite un JSON valide.",
  "latitudeErrorText": "Ce champ nécessite une latitude valide.",
  "longitudeErrorText": "Ce champ nécessite une longitude valide.",
  "base64ErrorText": "Ce champ nécessite une chaîne Base64 valide.",
  "pathErrorText": "Ce champ nécessite un chemin valide.",
  "oddNumberErrorText": "Ce champ nécessite un nombre impair.",
  "evenNumberErrorText": "Ce champ nécessite un nombre pair.",
  "portNumberErrorText": "Ce champ nécessite un numéro de port valide.",
  "macAddressErrorText": "Ce champ nécessite une adresse MAC valide.",
  "startsWithErrorText": "La valeur doit commencer par {value}.",
  "endsWithErrorText": "La valeur doit se terminer par {value}.",
  "containsErrorText": "La valeur doit contenir {value}.",
  "betweenErrorText": "La valeur doit être comprise entre {min} et {max}.",
  "containsElementErrorText": "La valeur doit être dans la liste des valeurs autorisées.",
  "doesNotContainElementErrorText": "La valeur ne peut pas être dans la liste.",
  "ibanErrorText": "Ce champ nécessite un IBAN valide.",
  "uniqueErrorText": "Ce champ doit être unique.",
  "bicErrorText": "Ce champ nécessite un code BIC valide.",
  "isbnErrorText": "Ce champ nécessite un ISBN valide.",
  "singleLineErrorText": "Ce champ doit être une seule ligne.",
  "timeErrorText": "Ce champ nécessite une heure valide.",
  "dateMustBeInTheFutureErrorText": "La date doit être dans le futur.",
  "dateMustBeInThePastErrorText": "La date doit être dans le passé.",
  "fileNameErrorText": "La valeur doit être un nom de fichier valide.",
  "negativeNumberErrorText": "La valeur doit être un nombre négatif.",
  "positiveNumberErrorText": "La valeur doit être un nombre positif.",
  "notZeroNumberErrorText": "La valeur ne doit pas être zéro.",
  "ssnErrorText": "La valeur doit être un numéro de sécurité sociale valide.",
  "zipCodeErrorText": "La valeur doit être un code postal valide.",
  "usernameErrorText": "La valeur doit être un nom d'utilisateur valide.",
  "usernameCannotContainNumbersErrorText": "Le nom d'utilisateur ne peut pas contenir de chiffres.",
  "usernameCannotContainUnderscoreErrorText": "Le nom d'utilisateur ne peut pas contenir de tiret bas.",
  "usernameCannotContainSpecialCharErrorText": "Le nom d'utilisateur ne peut pas contenir de caractères spéciaux.",
  "usernameCannotContainSpacesErrorText": "Le nom d'utilisateur ne peut pas contenir d'espaces.",
  "usernameCannotContainDotsErrorText": "Le nom d'utilisateur ne peut pas contenir de points.",
  "usernameCannotContainDashesErrorText": "Le nom d'utilisateur ne peut pas contenir de tirets.",
  "invalidMimeTypeErrorText": "Type MIME invalide.",
  "timezoneErrorText": "La valeur doit être un fuseau horaire valide.",
  "cityErrorText": "La valeur doit être un nom de ville valide.",
  "countryErrorText": "La valeur doit être un pays valide.",
  "stateErrorText": "La valeur doit être un état valide.",
  "streetErrorText": "La valeur doit être un nom de rue valide.",
  "firstNameErrorText": "La valeur doit être un prénom valide.",
  "lastNameErrorText": "La valeur doit être un nom de famille valide.",
  "passportNumberErrorText": "La valeur doit être un numéro de passeport valide.",
  "primeNumberErrorText": "La valeur doit être un nombre premier.",
  "dunsErrorText": "La valeur doit être un numéro DUNS valide.",
  "licensePlateErrorText": "La valeur doit être une plaque d'immatriculation valide.",
  "vinErrorText": "La valeur doit être un numéro VIN valide.",
  "languageCodeErrorText": "La valeur doit être un code de langue valide.",
  "floatErrorText": "La valeur doit être un nombre à virgule flottante valide.",
  "hexadecimalErrorText": "La valeur doit être un nombre hexadécimal valide.",
"betweenNumErrorText": "La valeur doit être {minInclusive, select, true{supérieure ou égale à} other{supérieure à}} {min} et {maxInclusive, select, true{inférieure ou égale à} other{inférieure à}} {max}",
  "@betweenNumErrorText": {
    "description": "Error text when a value must be within a specific range",
    "placeholders": {
      "min": {
        "type": "num",
        "description": "The minimum allowed value"
      },
      "max": {
        "type": "num",
        "description": "The maximum allowed value"
      },
      "minInclusive": {
        "type": "String",
        "description": "Whether the minimum bound is inclusive"
      },
      "maxInclusive": {
        "type": "String",
        "description": "Whether the maximum bound is inclusive"
      }
    }
  },

  "booleanErrorText": "Ce champ nécessite une valeur booléenne valide (vrai ou faux).",

  "dateMustBeAfterErrorText": "La date doit être après {reference}.",
  "@dateMustBeAfterErrorText": {
    "placeholders": {
      "reference": {
        "type": "DateTime",
        "format": "yMd",
        "example": "11/10/2021",
        "description": "The minimum date allowed"
      }
    }
  },

  "dateMustBeBeforeErrorText": "La date doit être avant {reference}.",
  "@dateMustBeBeforeErrorText": {
    "placeholders": {
      "reference": {
        "type": "DateTime",
        "format": "yMd",
        "example": "11/10/2021",
        "description": "The maximum date allowed"
      }
    }
  },

  "dateMustBeBetweenErrorText": "La date doit être comprise entre {minReference} et {maxReference}.",
  "@dateMustBeBetweenErrorText": {
    "placeholders": {
      "minReference": {
        "type": "DateTime",
        "format": "yMd",
        "example": "11/10/2021",
        "description": "The minimum date allowed"
      },
      "maxReference": {
        "type": "DateTime",
        "format": "yMd",
        "example": "11/10/2021",
        "description": "The maximum date allowed"
      }
    }
  },

  "dateTimeErrorText": "Ce champ nécessite une date et une heure valides.",

  "greaterThanErrorText": "La valeur doit être supérieure à {min}.",
  "@greaterThanErrorText": {
    "placeholders": {
      "min": {
        "type": "num",
        "description": "The minimum value allowed"
      }
    }
  },

  "greaterThanOrEqualToErrorText": "La valeur doit être supérieure ou égale à {min}.",
  "@greaterThanOrEqualToErrorText": {
    "placeholders": {
      "min": {
        "type": "num",
        "description": "The minimum value allowed"
      }
    }
  },

  "isOptionalErrorText": "Le champ est optionnel, sinon, {nextErrorMessage}",
  "@isOptionalErrorText": {
    "placeholders": {
      "nextErrorMessage": {
        "type": "String",
        "description": "The error text from the next validator."
      }
    }
  },

  "isStringErrorText": "Ce champ nécessite une chaîne de caractères valide.",

  "lessThanErrorText": "La valeur doit être inférieure à {max}.",
  "@lessThanErrorText": {
    "placeholders": {
      "max": {
        "type": "num",
        "description": "The maximum value allowed"
      }
    }
  },

  "lessThanOrEqualToErrorText": "La valeur doit être inférieure ou égale à {max}.",
  "@lessThanOrEqualToErrorText": {
    "placeholders": {
      "max": {
        "type": "num",
        "description": "The maximum value allowed"
      }
    }
  },

  "orSeparator": " ou ",

  "transformAndValidateErrorTextV1": "La valeur ne peut pas être transformée.",

  "transformAndValidateErrorTextV2": "La valeur doit être un(e) {transformedResultTypeDescription} valide.",
  "@transformAndValidateErrorTextV2": {
    "placeholders": {
      "transformedResultTypeDescription": {
        "type": "String",
        "description": "A description for the expected transformed type."
      }
    }
  }
}